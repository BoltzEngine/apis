// Code generated by protoc-gen-go. DO NOT EDIT.
// source: master.proto

package rpc

import (
	fmt "fmt"
	adm "github.com/BoltzEngine/apis/rpc/adm"
	apns "github.com/BoltzEngine/apis/rpc/apns"
	gcm "github.com/BoltzEngine/apis/rpc/gcm"
	webpush "github.com/BoltzEngine/apis/rpc/webpush"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Priority はメッセージの優先順位を表す。
type Priority int32

const (
	// 可能な限り早く、デバイスがスリープでも通知する。
	Priority_HIGH Priority = 0
	// バッテリ状況を考慮して通知する。
	// APNsのcontent-available通知はNORMALで送らなければならない。
	Priority_NORMAL Priority = 1
	// WebPushのみ; topic updateなど
	Priority_LOW Priority = 2
	// WebPushのみ; advertisementなど
	Priority_VERY_LOW Priority = 3
)

var Priority_name = map[int32]string{
	0: "HIGH",
	1: "NORMAL",
	2: "LOW",
	3: "VERY_LOW",
}

var Priority_value = map[string]int32{
	"HIGH":     0,
	"NORMAL":   1,
	"LOW":      2,
	"VERY_LOW": 3,
}

func (x Priority) String() string {
	return proto.EnumName(Priority_name, int32(x))
}

func (Priority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{0}
}

// FailureKind は送信失敗の理由を表す。
type FailureKind int32

const (
	// 通信不能等の一時的なエラー(再送すれば届く可能性がある)
	FailureKind_TEMPORARY_ERROR FailureKind = 0
	// 無効なトークンなので次からは使うべきではない
	FailureKind_INVALID_TOKEN FailureKind = 1
	// 不正なメッセージのため送信したメッセージの確認すること
	FailureKind_INVALID_PAYLOAD FailureKind = 2
)

var FailureKind_name = map[int32]string{
	0: "TEMPORARY_ERROR",
	1: "INVALID_TOKEN",
	2: "INVALID_PAYLOAD",
}

var FailureKind_value = map[string]int32{
	"TEMPORARY_ERROR": 0,
	"INVALID_TOKEN":   1,
	"INVALID_PAYLOAD": 2,
}

func (x FailureKind) String() string {
	return proto.EnumName(FailureKind_name, int32(x))
}

func (FailureKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{1}
}

// Platform は通知サービスを表す。
type Platform int32

const (
	Platform_UNKNOWN Platform = 0
	Platform_APNS    Platform = 1
	Platform_GCM     Platform = 2
	Platform_FCM     Platform = 2
	Platform_ALT     Platform = 3
	Platform_WEBPUSH Platform = 4
	Platform_ADM     Platform = 5
)

var Platform_name = map[int32]string{
	0: "UNKNOWN",
	1: "APNS",
	2: "GCM",
	// Duplicate value: 2: "FCM",
	3: "ALT",
	4: "WEBPUSH",
	5: "ADM",
}

var Platform_value = map[string]int32{
	"UNKNOWN": 0,
	"APNS":    1,
	"GCM":     2,
	"FCM":     2,
	"ALT":     3,
	"WEBPUSH": 4,
	"ADM":     5,
}

func (x Platform) String() string {
	return proto.EnumName(Platform_name, int32(x))
}

func (Platform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{2}
}

// Message はデバイスに通知するメッセージを表す。
type Message struct {
	// APNs固有の接続情報
	ApnsHeader *apns.Header `protobuf:"bytes,1,opt,name=apnsHeader,proto3" json:"apnsHeader,omitempty"`
	// FCM固有の接続情報
	GcmHeader *gcm.Header `protobuf:"bytes,2,opt,name=gcmHeader,proto3" json:"gcmHeader,omitempty"`
	// WebPush固有の接続情報
	WebpushHeader *webpush.Header `protobuf:"bytes,9,opt,name=webpushHeader,proto3" json:"webpushHeader,omitempty"`
	// ADM固有の接続情報
	AdmHeader *adm.Header `protobuf:"bytes,11,opt,name=admHeader,proto3" json:"admHeader,omitempty"`
	// 通知対象のデバイストークン
	// APNsの場合は["1" + (hexエンコードされたトークン)]
	// FCMの場合は["2" + (FCMの登録ID)]
	// WebPushの場合は["4" + {"v":1,"endpoint":"(WebPushエンドポイント)","p256dh":"(ブラウザ公開鍵)","auth":"(WebPush乱数)"}],
	// ADMの場合は["5" + (ADM登録ID)]
	Tokens []string `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`
	// メッセージ配信の優先度
	// Priority未定義値の場合は各プラットフォームのデフォルトを使う
	Priority Priority `protobuf:"varint,4,opt,name=priority,proto3,enum=rpc.Priority" json:"priority,omitempty"`
	// メッセージ配信の有効期限
	Expiration uint32 `protobuf:"varint,5,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// メッセージをまとめる文字列(URLセーフな文字を32文字まで)
	CollapseKey string `protobuf:"bytes,12,opt,name=collapseKey,proto3" json:"collapseKey,omitempty"`
	// APNsへ送るJSONペイロード(APNsトークンを含む場合は必須)
	// JSONのフォーマットはAppleのドキュメントを参照すること
	Payload string `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	// FCM/ADMへ送るパラメータ(FCM登録ID/ADM登録IDを含む場合は必須)
	// それぞれの意味はGoogleのドキュメントを参照すること
	Parameters *gcm.Parameters `protobuf:"bytes,7,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// WebPushへ送るHTTP Body(WebPushトークンを含む場合は必須)
	// フォーマットは受信アプリの仕様に依存する
	Body string `protobuf:"bytes,10,opt,name=body,proto3" json:"body,omitempty"`
	// 1秒あたりの通知数(0以下なら無制限)
	BandWidth            int32    `protobuf:"varint,8,opt,name=bandWidth,proto3" json:"bandWidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetApnsHeader() *apns.Header {
	if m != nil {
		return m.ApnsHeader
	}
	return nil
}

func (m *Message) GetGcmHeader() *gcm.Header {
	if m != nil {
		return m.GcmHeader
	}
	return nil
}

func (m *Message) GetWebpushHeader() *webpush.Header {
	if m != nil {
		return m.WebpushHeader
	}
	return nil
}

func (m *Message) GetAdmHeader() *adm.Header {
	if m != nil {
		return m.AdmHeader
	}
	return nil
}

func (m *Message) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *Message) GetPriority() Priority {
	if m != nil {
		return m.Priority
	}
	return Priority_HIGH
}

func (m *Message) GetExpiration() uint32 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *Message) GetCollapseKey() string {
	if m != nil {
		return m.CollapseKey
	}
	return ""
}

func (m *Message) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Message) GetParameters() *gcm.Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Message) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Message) GetBandWidth() int32 {
	if m != nil {
		return m.BandWidth
	}
	return 0
}

// DeliveryFailure は送信失敗したトークンと理由を表す。
type DeliveryFailure struct {
	Kind                 FailureKind `protobuf:"varint,1,opt,name=kind,proto3,enum=rpc.FailureKind" json:"kind,omitempty"`
	Token                string      `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Status               string      `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp            uint32      `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DeliveryFailure) Reset()         { *m = DeliveryFailure{} }
func (m *DeliveryFailure) String() string { return proto.CompactTextString(m) }
func (*DeliveryFailure) ProtoMessage()    {}
func (*DeliveryFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{1}
}

func (m *DeliveryFailure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeliveryFailure.Unmarshal(m, b)
}
func (m *DeliveryFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeliveryFailure.Marshal(b, m, deterministic)
}
func (m *DeliveryFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliveryFailure.Merge(m, src)
}
func (m *DeliveryFailure) XXX_Size() int {
	return xxx_messageInfo_DeliveryFailure.Size(m)
}
func (m *DeliveryFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliveryFailure.DiscardUnknown(m)
}

var xxx_messageInfo_DeliveryFailure proto.InternalMessageInfo

func (m *DeliveryFailure) GetKind() FailureKind {
	if m != nil {
		return m.Kind
	}
	return FailureKind_TEMPORARY_ERROR
}

func (m *DeliveryFailure) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *DeliveryFailure) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DeliveryFailure) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// TokenRenewal はプラットフォーム側でのトークン変更を表す。
type TokenRenewal struct {
	// 送信に使ったトークン
	RecentToken string `protobuf:"bytes,1,opt,name=recentToken,proto3" json:"recentToken,omitempty"`
	// 新しいトークン
	LatestToken          string   `protobuf:"bytes,2,opt,name=latestToken,proto3" json:"latestToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenRenewal) Reset()         { *m = TokenRenewal{} }
func (m *TokenRenewal) String() string { return proto.CompactTextString(m) }
func (*TokenRenewal) ProtoMessage()    {}
func (*TokenRenewal) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{2}
}

func (m *TokenRenewal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenRenewal.Unmarshal(m, b)
}
func (m *TokenRenewal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenRenewal.Marshal(b, m, deterministic)
}
func (m *TokenRenewal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenRenewal.Merge(m, src)
}
func (m *TokenRenewal) XXX_Size() int {
	return xxx_messageInfo_TokenRenewal.Size(m)
}
func (m *TokenRenewal) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenRenewal.DiscardUnknown(m)
}

var xxx_messageInfo_TokenRenewal proto.InternalMessageInfo

func (m *TokenRenewal) GetRecentToken() string {
	if m != nil {
		return m.RecentToken
	}
	return ""
}

func (m *TokenRenewal) GetLatestToken() string {
	if m != nil {
		return m.LatestToken
	}
	return ""
}

// Event は確認が必要なイベントを表す。
type Event struct {
	// イベントが発生したプラットフォーム
	Platform Platform `protobuf:"varint,1,opt,name=platform,proto3,enum=rpc.Platform" json:"platform,omitempty"`
	// イベント発生の理由
	//
	// Types that are valid to be assigned to Event:
	//	*Event_Failed
	//	*Event_Renewed
	Event                isEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{3}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetPlatform() Platform {
	if m != nil {
		return m.Platform
	}
	return Platform_UNKNOWN
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Failed struct {
	Failed *DeliveryFailure `protobuf:"bytes,2,opt,name=failed,proto3,oneof"`
}

type Event_Renewed struct {
	Renewed *TokenRenewal `protobuf:"bytes,3,opt,name=renewed,proto3,oneof"`
}

func (*Event_Failed) isEvent_Event() {}

func (*Event_Renewed) isEvent_Event() {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetFailed() *DeliveryFailure {
	if x, ok := m.GetEvent().(*Event_Failed); ok {
		return x.Failed
	}
	return nil
}

func (m *Event) GetRenewed() *TokenRenewal {
	if x, ok := m.GetEvent().(*Event_Renewed); ok {
		return x.Renewed
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_Failed)(nil),
		(*Event_Renewed)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_Failed:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Failed); err != nil {
			return err
		}
	case *Event_Renewed:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Renewed); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Event has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 2: // event.failed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeliveryFailure)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Failed{msg}
		return true, err
	case 3: // event.renewed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TokenRenewal)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Renewed{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_Failed:
		s := proto.Size(x.Failed)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Renewed:
		s := proto.Size(x.Renewed)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StatisticsQuery struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatisticsQuery) Reset()         { *m = StatisticsQuery{} }
func (m *StatisticsQuery) String() string { return proto.CompactTextString(m) }
func (*StatisticsQuery) ProtoMessage()    {}
func (*StatisticsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{4}
}

func (m *StatisticsQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatisticsQuery.Unmarshal(m, b)
}
func (m *StatisticsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatisticsQuery.Marshal(b, m, deterministic)
}
func (m *StatisticsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsQuery.Merge(m, src)
}
func (m *StatisticsQuery) XXX_Size() int {
	return xxx_messageInfo_StatisticsQuery.Size(m)
}
func (m *StatisticsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsQuery proto.InternalMessageInfo

// MasterStatistics はBoltzEngineマスタの状態をあらわす。
type MasterStatistics struct {
	Version       string            `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Compiler      string            `protobuf:"bytes,2,opt,name=compiler,proto3" json:"compiler,omitempty"`
	NumProcessor  int32             `protobuf:"varint,3,opt,name=numProcessor,proto3" json:"numProcessor,omitempty"`
	NumTask       int32             `protobuf:"varint,4,opt,name=numTask,proto3" json:"numTask,omitempty"`
	MemStatistics *MemoryStatistics `protobuf:"bytes,5,opt,name=memStatistics,proto3" json:"memStatistics,omitempty"`
	// スレーブに対して送信待ちしているリクエスト数
	NumPending int32 `protobuf:"varint,6,opt,name=numPending,proto3" json:"numPending,omitempty"`
	// アドレスをキーとする各スレーブの状態
	SlaveStatistics      map[string]*SlaveStatistics `protobuf:"bytes,7,rep,name=slaveStatistics,proto3" json:"slaveStatistics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *MasterStatistics) Reset()         { *m = MasterStatistics{} }
func (m *MasterStatistics) String() string { return proto.CompactTextString(m) }
func (*MasterStatistics) ProtoMessage()    {}
func (*MasterStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{5}
}

func (m *MasterStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MasterStatistics.Unmarshal(m, b)
}
func (m *MasterStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MasterStatistics.Marshal(b, m, deterministic)
}
func (m *MasterStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterStatistics.Merge(m, src)
}
func (m *MasterStatistics) XXX_Size() int {
	return xxx_messageInfo_MasterStatistics.Size(m)
}
func (m *MasterStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_MasterStatistics proto.InternalMessageInfo

func (m *MasterStatistics) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MasterStatistics) GetCompiler() string {
	if m != nil {
		return m.Compiler
	}
	return ""
}

func (m *MasterStatistics) GetNumProcessor() int32 {
	if m != nil {
		return m.NumProcessor
	}
	return 0
}

func (m *MasterStatistics) GetNumTask() int32 {
	if m != nil {
		return m.NumTask
	}
	return 0
}

func (m *MasterStatistics) GetMemStatistics() *MemoryStatistics {
	if m != nil {
		return m.MemStatistics
	}
	return nil
}

func (m *MasterStatistics) GetNumPending() int32 {
	if m != nil {
		return m.NumPending
	}
	return 0
}

func (m *MasterStatistics) GetSlaveStatistics() map[string]*SlaveStatistics {
	if m != nil {
		return m.SlaveStatistics
	}
	return nil
}

// SlaveStatistics はBoltzEngineスレーブの状態をあらわす。
type SlaveStatistics struct {
	// Goコンパイラのバージョン
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Goコンパイラの名前
	Compiler string `protobuf:"bytes,2,opt,name=compiler,proto3" json:"compiler,omitempty"`
	// CPUコア数
	NumProcessor int32 `protobuf:"varint,3,opt,name=numProcessor,proto3" json:"numProcessor,omitempty"`
	// 実行中のゴルーチン数
	NumTask int32 `protobuf:"varint,4,opt,name=numTask,proto3" json:"numTask,omitempty"`
	// メモリ状態
	MemStatistics *MemoryStatistics `protobuf:"bytes,5,opt,name=memStatistics,proto3" json:"memStatistics,omitempty"`
	// マスタひとつにつき最大いくつの同時リクエストを許可するか
	MaxAgents int32 `protobuf:"varint,6,opt,name=maxAgents,proto3" json:"maxAgents,omitempty"`
	// リクエストされた数
	NumTotalRequest int32 `protobuf:"varint,7,opt,name=numTotalRequest,proto3" json:"numTotalRequest,omitempty"`
	// 現在送信中の端末数
	NumDelivering int32 `protobuf:"varint,8,opt,name=numDelivering,proto3" json:"numDelivering,omitempty"`
	// 送信した端末数
	NumDeliveredDevices int32 `protobuf:"varint,9,opt,name=numDeliveredDevices,proto3" json:"numDeliveredDevices,omitempty"`
	// リクエスト開始から終了までの合計時間(Duration)
	TotalExecutionTime int64 `protobuf:"varint,10,opt,name=totalExecutionTime,proto3" json:"totalExecutionTime,omitempty"`
	// 最新のリクエスト処理時間(Duration)
	LatestExecutionTime int64 `protobuf:"varint,11,opt,name=latestExecutionTime,proto3" json:"latestExecutionTime,omitempty"`
	// SlaveActivityが最後に更新された時間(Unix-time)
	LastUpdate int64 `protobuf:"varint,12,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	// リトライした数
	RetryCount           int32    `protobuf:"varint,13,opt,name=retryCount,proto3" json:"retryCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlaveStatistics) Reset()         { *m = SlaveStatistics{} }
func (m *SlaveStatistics) String() string { return proto.CompactTextString(m) }
func (*SlaveStatistics) ProtoMessage()    {}
func (*SlaveStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{6}
}

func (m *SlaveStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlaveStatistics.Unmarshal(m, b)
}
func (m *SlaveStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlaveStatistics.Marshal(b, m, deterministic)
}
func (m *SlaveStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveStatistics.Merge(m, src)
}
func (m *SlaveStatistics) XXX_Size() int {
	return xxx_messageInfo_SlaveStatistics.Size(m)
}
func (m *SlaveStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveStatistics proto.InternalMessageInfo

func (m *SlaveStatistics) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SlaveStatistics) GetCompiler() string {
	if m != nil {
		return m.Compiler
	}
	return ""
}

func (m *SlaveStatistics) GetNumProcessor() int32 {
	if m != nil {
		return m.NumProcessor
	}
	return 0
}

func (m *SlaveStatistics) GetNumTask() int32 {
	if m != nil {
		return m.NumTask
	}
	return 0
}

func (m *SlaveStatistics) GetMemStatistics() *MemoryStatistics {
	if m != nil {
		return m.MemStatistics
	}
	return nil
}

func (m *SlaveStatistics) GetMaxAgents() int32 {
	if m != nil {
		return m.MaxAgents
	}
	return 0
}

func (m *SlaveStatistics) GetNumTotalRequest() int32 {
	if m != nil {
		return m.NumTotalRequest
	}
	return 0
}

func (m *SlaveStatistics) GetNumDelivering() int32 {
	if m != nil {
		return m.NumDelivering
	}
	return 0
}

func (m *SlaveStatistics) GetNumDeliveredDevices() int32 {
	if m != nil {
		return m.NumDeliveredDevices
	}
	return 0
}

func (m *SlaveStatistics) GetTotalExecutionTime() int64 {
	if m != nil {
		return m.TotalExecutionTime
	}
	return 0
}

func (m *SlaveStatistics) GetLatestExecutionTime() int64 {
	if m != nil {
		return m.LatestExecutionTime
	}
	return 0
}

func (m *SlaveStatistics) GetLastUpdate() int64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *SlaveStatistics) GetRetryCount() int32 {
	if m != nil {
		return m.RetryCount
	}
	return 0
}

// MemoryStatistics はサーバのメモリ状況をあらわす。
type MemoryStatistics struct {
	// 割り当てられているメモリ容量
	Alloc uint64 `protobuf:"varint,1,opt,name=alloc,proto3" json:"alloc,omitempty"`
	// 割り当てたメモリ容量
	TotalAlloc uint64 `protobuf:"varint,2,opt,name=totalAlloc,proto3" json:"totalAlloc,omitempty"`
	// システムに確保されたメモリ容量
	Sys uint64 `protobuf:"varint,3,opt,name=sys,proto3" json:"sys,omitempty"`
	// mallocによりメモリを割り当てた回数
	Mallocs uint64 `protobuf:"varint,4,opt,name=mallocs,proto3" json:"mallocs,omitempty"`
	// freeした回数
	Frees uint64 `protobuf:"varint,5,opt,name=frees,proto3" json:"frees,omitempty"`
	// ヒープに割り当てられているメモリ容量
	HeapAlloc uint64 `protobuf:"varint,6,opt,name=heapAlloc,proto3" json:"heapAlloc,omitempty"`
	// システムに確保されたメモリ容量(ヒープ)
	HeapSys uint64 `protobuf:"varint,7,opt,name=heapSys,proto3" json:"heapSys,omitempty"`
	// ヒープにあるオブジェクト数
	HeapObjects          uint64   `protobuf:"varint,8,opt,name=heapObjects,proto3" json:"heapObjects,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemoryStatistics) Reset()         { *m = MemoryStatistics{} }
func (m *MemoryStatistics) String() string { return proto.CompactTextString(m) }
func (*MemoryStatistics) ProtoMessage()    {}
func (*MemoryStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{7}
}

func (m *MemoryStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemoryStatistics.Unmarshal(m, b)
}
func (m *MemoryStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemoryStatistics.Marshal(b, m, deterministic)
}
func (m *MemoryStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryStatistics.Merge(m, src)
}
func (m *MemoryStatistics) XXX_Size() int {
	return xxx_messageInfo_MemoryStatistics.Size(m)
}
func (m *MemoryStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryStatistics proto.InternalMessageInfo

func (m *MemoryStatistics) GetAlloc() uint64 {
	if m != nil {
		return m.Alloc
	}
	return 0
}

func (m *MemoryStatistics) GetTotalAlloc() uint64 {
	if m != nil {
		return m.TotalAlloc
	}
	return 0
}

func (m *MemoryStatistics) GetSys() uint64 {
	if m != nil {
		return m.Sys
	}
	return 0
}

func (m *MemoryStatistics) GetMallocs() uint64 {
	if m != nil {
		return m.Mallocs
	}
	return 0
}

func (m *MemoryStatistics) GetFrees() uint64 {
	if m != nil {
		return m.Frees
	}
	return 0
}

func (m *MemoryStatistics) GetHeapAlloc() uint64 {
	if m != nil {
		return m.HeapAlloc
	}
	return 0
}

func (m *MemoryStatistics) GetHeapSys() uint64 {
	if m != nil {
		return m.HeapSys
	}
	return 0
}

func (m *MemoryStatistics) GetHeapObjects() uint64 {
	if m != nil {
		return m.HeapObjects
	}
	return 0
}

// UnavailableTokenEvent はアンインストール扱いのトークンをあらわす。
type UnavailableTokenEvent struct {
	// 無効と判断された時間(Unix-time)
	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 無効トークン
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnavailableTokenEvent) Reset()         { *m = UnavailableTokenEvent{} }
func (m *UnavailableTokenEvent) String() string { return proto.CompactTextString(m) }
func (*UnavailableTokenEvent) ProtoMessage()    {}
func (*UnavailableTokenEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{8}
}

func (m *UnavailableTokenEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnavailableTokenEvent.Unmarshal(m, b)
}
func (m *UnavailableTokenEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnavailableTokenEvent.Marshal(b, m, deterministic)
}
func (m *UnavailableTokenEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnavailableTokenEvent.Merge(m, src)
}
func (m *UnavailableTokenEvent) XXX_Size() int {
	return xxx_messageInfo_UnavailableTokenEvent.Size(m)
}
func (m *UnavailableTokenEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_UnavailableTokenEvent.DiscardUnknown(m)
}

var xxx_messageInfo_UnavailableTokenEvent proto.InternalMessageInfo

func (m *UnavailableTokenEvent) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UnavailableTokenEvent) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterEnum("rpc.Priority", Priority_name, Priority_value)
	proto.RegisterEnum("rpc.FailureKind", FailureKind_name, FailureKind_value)
	proto.RegisterEnum("rpc.Platform", Platform_name, Platform_value)
	proto.RegisterType((*Message)(nil), "rpc.Message")
	proto.RegisterType((*DeliveryFailure)(nil), "rpc.DeliveryFailure")
	proto.RegisterType((*TokenRenewal)(nil), "rpc.TokenRenewal")
	proto.RegisterType((*Event)(nil), "rpc.Event")
	proto.RegisterType((*StatisticsQuery)(nil), "rpc.StatisticsQuery")
	proto.RegisterType((*MasterStatistics)(nil), "rpc.MasterStatistics")
	proto.RegisterMapType((map[string]*SlaveStatistics)(nil), "rpc.MasterStatistics.SlaveStatisticsEntry")
	proto.RegisterType((*SlaveStatistics)(nil), "rpc.SlaveStatistics")
	proto.RegisterType((*MemoryStatistics)(nil), "rpc.MemoryStatistics")
	proto.RegisterType((*UnavailableTokenEvent)(nil), "rpc.UnavailableTokenEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BoltzGatewayClient is the client API for BoltzGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BoltzGatewayClient interface {
	// Send はMessageを各デバイスへ送信する。
	// トークン無効など対応の必要なEventが発生したらクライアントへ返す。
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (BoltzGateway_SendClient, error)
	// FetchStatistics はmasterサービスと、masterから接続しているslaveの状態を返す。
	FetchStatistics(ctx context.Context, in *StatisticsQuery, opts ...grpc.CallOption) (*MasterStatistics, error)
	// APNsのフィードバックサービスから無効トークンを取得する。
	FetchFeedback(ctx context.Context, in *apns.Header, opts ...grpc.CallOption) (BoltzGateway_FetchFeedbackClient, error)
}

type boltzGatewayClient struct {
	cc *grpc.ClientConn
}

func NewBoltzGatewayClient(cc *grpc.ClientConn) BoltzGatewayClient {
	return &boltzGatewayClient{cc}
}

func (c *boltzGatewayClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (BoltzGateway_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BoltzGateway_serviceDesc.Streams[0], "/rpc.BoltzGateway/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &boltzGatewaySendClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BoltzGateway_SendClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type boltzGatewaySendClient struct {
	grpc.ClientStream
}

func (x *boltzGatewaySendClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *boltzGatewayClient) FetchStatistics(ctx context.Context, in *StatisticsQuery, opts ...grpc.CallOption) (*MasterStatistics, error) {
	out := new(MasterStatistics)
	err := c.cc.Invoke(ctx, "/rpc.BoltzGateway/FetchStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boltzGatewayClient) FetchFeedback(ctx context.Context, in *apns.Header, opts ...grpc.CallOption) (BoltzGateway_FetchFeedbackClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BoltzGateway_serviceDesc.Streams[1], "/rpc.BoltzGateway/FetchFeedback", opts...)
	if err != nil {
		return nil, err
	}
	x := &boltzGatewayFetchFeedbackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BoltzGateway_FetchFeedbackClient interface {
	Recv() (*UnavailableTokenEvent, error)
	grpc.ClientStream
}

type boltzGatewayFetchFeedbackClient struct {
	grpc.ClientStream
}

func (x *boltzGatewayFetchFeedbackClient) Recv() (*UnavailableTokenEvent, error) {
	m := new(UnavailableTokenEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BoltzGatewayServer is the server API for BoltzGateway service.
type BoltzGatewayServer interface {
	// Send はMessageを各デバイスへ送信する。
	// トークン無効など対応の必要なEventが発生したらクライアントへ返す。
	Send(*Message, BoltzGateway_SendServer) error
	// FetchStatistics はmasterサービスと、masterから接続しているslaveの状態を返す。
	FetchStatistics(context.Context, *StatisticsQuery) (*MasterStatistics, error)
	// APNsのフィードバックサービスから無効トークンを取得する。
	FetchFeedback(*apns.Header, BoltzGateway_FetchFeedbackServer) error
}

func RegisterBoltzGatewayServer(s *grpc.Server, srv BoltzGatewayServer) {
	s.RegisterService(&_BoltzGateway_serviceDesc, srv)
}

func _BoltzGateway_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BoltzGatewayServer).Send(m, &boltzGatewaySendServer{stream})
}

type BoltzGateway_SendServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type boltzGatewaySendServer struct {
	grpc.ServerStream
}

func (x *boltzGatewaySendServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _BoltzGateway_FetchStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoltzGatewayServer).FetchStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BoltzGateway/FetchStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoltzGatewayServer).FetchStatistics(ctx, req.(*StatisticsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoltzGateway_FetchFeedback_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(apns.Header)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BoltzGatewayServer).FetchFeedback(m, &boltzGatewayFetchFeedbackServer{stream})
}

type BoltzGateway_FetchFeedbackServer interface {
	Send(*UnavailableTokenEvent) error
	grpc.ServerStream
}

type boltzGatewayFetchFeedbackServer struct {
	grpc.ServerStream
}

func (x *boltzGatewayFetchFeedbackServer) Send(m *UnavailableTokenEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _BoltzGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.BoltzGateway",
	HandlerType: (*BoltzGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchStatistics",
			Handler:    _BoltzGateway_FetchStatistics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _BoltzGateway_Send_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchFeedback",
			Handler:       _BoltzGateway_FetchFeedback_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "master.proto",
}

func init() { proto.RegisterFile("master.proto", fileDescriptor_f9c348dec43a6705) }

var fileDescriptor_f9c348dec43a6705 = []byte{
	// 1221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x5d, 0x8e, 0x1a, 0x47,
	0x10, 0xde, 0xe1, 0x67, 0x81, 0x02, 0xcc, 0xb8, 0xed, 0x8d, 0x10, 0xb2, 0x12, 0x84, 0xfc, 0x80,
	0x57, 0x09, 0x58, 0x58, 0x51, 0xa2, 0x44, 0x8a, 0xc4, 0x7a, 0x59, 0xaf, 0xb3, 0xcb, 0x4f, 0x7a,
	0x59, 0x6f, 0x9c, 0x17, 0xab, 0x99, 0x29, 0xb3, 0x93, 0x9d, 0xbf, 0x4c, 0x37, 0xd8, 0x93, 0xd7,
	0xe4, 0x06, 0x79, 0xcb, 0x11, 0xf2, 0x92, 0x5b, 0xe4, 0x24, 0x39, 0x48, 0xd4, 0x3d, 0x3d, 0xcb,
	0x80, 0xb8, 0x40, 0x5e, 0xa0, 0xeb, 0xab, 0xaf, 0xba, 0xaa, 0xab, 0xaa, 0xab, 0x07, 0x6a, 0x1e,
	0xe3, 0x02, 0xa3, 0x5e, 0x18, 0x05, 0x22, 0x20, 0xf9, 0x28, 0xb4, 0x5a, 0x0d, 0x16, 0xfa, 0xbc,
	0x2f, 0x7f, 0x12, 0xb4, 0x55, 0x5f, 0x5a, 0x5e, 0x7f, 0x69, 0x79, 0x5a, 0x3c, 0xfa, 0x80, 0x8b,
	0x70, 0xc5, 0x6f, 0xfb, 0xfa, 0x3f, 0x65, 0x31, 0xdb, 0xeb, 0x33, 0x5b, 0xb3, 0x3a, 0xff, 0xe4,
	0xa1, 0x34, 0x46, 0xce, 0xd9, 0x12, 0xc9, 0xe7, 0x00, 0x72, 0xbb, 0x73, 0x64, 0x36, 0x46, 0x4d,
	0xa3, 0x6d, 0x74, 0xab, 0x83, 0x5a, 0x4f, 0x79, 0x48, 0x30, 0x9a, 0xd1, 0x93, 0x67, 0x50, 0x59,
	0x5a, 0x9e, 0x26, 0xe7, 0x14, 0xb9, 0xda, 0x93, 0xee, 0x35, 0x77, 0xa3, 0x25, 0x5f, 0x42, 0x5d,
	0x07, 0xa1, 0xe9, 0x15, 0x45, 0x6f, 0xf4, 0xd2, 0xd0, 0xb4, 0xc9, 0x36, 0x4b, 0x7a, 0x60, 0x76,
	0xea, 0xa1, 0xaa, 0x3d, 0xc8, 0xd0, 0x53, 0x0f, 0xf7, 0x5a, 0xf2, 0x09, 0x1c, 0x8a, 0xe0, 0x0e,
	0x7d, 0xde, 0xcc, 0xb7, 0xf3, 0xdd, 0x0a, 0xd5, 0x12, 0x79, 0x06, 0xe5, 0x30, 0x72, 0x82, 0xc8,
	0x11, 0x71, 0xb3, 0xd0, 0x36, 0xba, 0x0f, 0x06, 0xf5, 0x5e, 0x14, 0x5a, 0xbd, 0x99, 0x06, 0xe9,
	0xbd, 0x9a, 0x7c, 0x0a, 0x80, 0x1f, 0x43, 0x27, 0x62, 0xc2, 0x09, 0xfc, 0x66, 0xb1, 0x6d, 0x74,
	0xeb, 0x34, 0x83, 0x90, 0x36, 0x54, 0xad, 0xc0, 0x75, 0x59, 0xc8, 0xf1, 0x02, 0xe3, 0x66, 0xad,
	0x6d, 0x74, 0x2b, 0x34, 0x0b, 0x91, 0x26, 0x94, 0x42, 0x16, 0xbb, 0x01, 0xb3, 0x9b, 0x87, 0x4a,
	0x9b, 0x8a, 0xa4, 0x0f, 0x10, 0xb2, 0x88, 0x79, 0x28, 0x30, 0xe2, 0xcd, 0x92, 0x3e, 0xbd, 0x4c,
	0xd6, 0xec, 0x1e, 0xa6, 0x19, 0x0a, 0x21, 0x50, 0x58, 0x04, 0x76, 0xdc, 0x04, 0xb5, 0x8f, 0x5a,
	0x93, 0x27, 0x50, 0x59, 0x30, 0xdf, 0xbe, 0x71, 0x6c, 0x71, 0xdb, 0x2c, 0xb7, 0x8d, 0x6e, 0x91,
	0x6e, 0x80, 0xce, 0x6f, 0x06, 0x34, 0x4e, 0xd1, 0x75, 0xd6, 0x18, 0xc5, 0x67, 0xcc, 0x71, 0x57,
	0x11, 0x92, 0xa7, 0x50, 0xb8, 0x73, 0x7c, 0x5b, 0x95, 0xf2, 0xc1, 0xc0, 0x54, 0x27, 0xd7, 0xba,
	0x0b, 0xc7, 0xb7, 0xa9, 0xd2, 0x92, 0xc7, 0x50, 0x54, 0xd9, 0x52, 0x45, 0xac, 0xd0, 0x44, 0x90,
	0x19, 0xe5, 0x82, 0x89, 0x95, 0xcc, 0xa8, 0x84, 0xb5, 0x24, 0xa3, 0x10, 0x8e, 0x87, 0x5c, 0x30,
	0x2f, 0x54, 0x29, 0xad, 0xd3, 0x0d, 0xd0, 0xa1, 0x50, 0x9b, 0x4b, 0x73, 0x8a, 0x3e, 0x7e, 0x60,
	0xae, 0x4c, 0x5a, 0x84, 0x16, 0xfa, 0x42, 0xa1, 0x2a, 0x90, 0x0a, 0xcd, 0x42, 0x92, 0xe1, 0x32,
	0x81, 0x5c, 0x33, 0x92, 0x18, 0xb2, 0x50, 0xe7, 0x4f, 0x03, 0x8a, 0xa3, 0x35, 0xfa, 0x42, 0x55,
	0xd3, 0x65, 0xe2, 0x7d, 0x10, 0x79, 0xfa, 0x4c, 0xba, 0x9a, 0x1a, 0xa4, 0xf7, 0x6a, 0xd2, 0x83,
	0xc3, 0xf7, 0xcc, 0x71, 0xd1, 0xd6, 0xad, 0xf9, 0x58, 0x11, 0x77, 0x12, 0x74, 0x7e, 0x40, 0x35,
	0x8b, 0x7c, 0x01, 0xa5, 0x48, 0xc6, 0x8c, 0xb6, 0x3a, 0x6f, 0x75, 0xf0, 0x50, 0x19, 0x64, 0x0f,
	0x73, 0x7e, 0x40, 0x53, 0xce, 0x49, 0x09, 0x8a, 0x28, 0x43, 0xea, 0x3c, 0x84, 0xc6, 0x95, 0x60,
	0xc2, 0xe1, 0xc2, 0xb1, 0xf8, 0x0f, 0x2b, 0x8c, 0xe2, 0xce, 0x1f, 0x79, 0x30, 0xc7, 0xea, 0xba,
	0x6e, 0x34, 0xb2, 0x37, 0xd6, 0x18, 0x71, 0xd9, 0x5a, 0x49, 0x12, 0x52, 0x91, 0xb4, 0xa0, 0x6c,
	0x05, 0x5e, 0xe8, 0xb8, 0xfa, 0x1a, 0x55, 0xe8, 0xbd, 0x4c, 0x3a, 0x50, 0xf3, 0x57, 0xde, 0x2c,
	0x0a, 0x2c, 0xe4, 0x3c, 0x88, 0x54, 0x68, 0x45, 0xba, 0x85, 0xc9, 0x9d, 0xfd, 0x95, 0x37, 0x67,
	0xfc, 0x4e, 0x95, 0xa3, 0x48, 0x53, 0x91, 0x7c, 0x0b, 0x75, 0x0f, 0xbd, 0x4d, 0x10, 0xaa, 0xa9,
	0xab, 0x83, 0x23, 0x75, 0xb2, 0x31, 0x7a, 0x41, 0x14, 0x6f, 0x94, 0x74, 0x9b, 0x2b, 0xaf, 0x83,
	0x74, 0x83, 0xbe, 0xed, 0xf8, 0x4b, 0xd5, 0xcf, 0x45, 0x9a, 0x41, 0xc8, 0x1c, 0x1a, 0xdc, 0x65,
	0x6b, 0xcc, 0x6c, 0x5f, 0x6a, 0xe7, 0xbb, 0xd5, 0xc1, 0x71, 0xb2, 0xfd, 0x4e, 0x02, 0x7a, 0x57,
	0xdb, 0xe4, 0x91, 0x2f, 0xa2, 0x98, 0xee, 0x6e, 0xd1, 0xfa, 0x11, 0x1e, 0xef, 0x23, 0x12, 0x13,
	0xf2, 0x77, 0x18, 0xeb, 0xd4, 0xc9, 0x25, 0x39, 0x86, 0xe2, 0x9a, 0xb9, 0x2b, 0xdc, 0xaa, 0xef,
	0x8e, 0x2d, 0x4d, 0x28, 0xdf, 0xe4, 0xbe, 0x36, 0x3a, 0xbf, 0x17, 0xa0, 0xb1, 0xa3, 0xfe, 0xff,
	0x15, 0xe5, 0x09, 0x54, 0x3c, 0xf6, 0x71, 0xb8, 0x44, 0x5f, 0x70, 0x5d, 0x93, 0x0d, 0x40, 0xba,
	0xd0, 0x90, 0x5e, 0x02, 0xc1, 0x5c, 0x8a, 0xbf, 0xac, 0x90, 0x0b, 0x35, 0x6a, 0x8a, 0x74, 0x17,
	0x26, 0x4f, 0xa1, 0xee, 0xaf, 0x3c, 0x7d, 0x1b, 0x64, 0x7d, 0x93, 0x71, 0xb2, 0x0d, 0x92, 0xe7,
	0xf0, 0x68, 0x03, 0xa0, 0x7d, 0x8a, 0x6b, 0xc7, 0x42, 0xae, 0x86, 0x77, 0x91, 0xee, 0x53, 0x91,
	0x1e, 0x10, 0x21, 0xfd, 0x8c, 0x3e, 0xa2, 0xb5, 0x92, 0x53, 0x73, 0xee, 0x78, 0xa8, 0x86, 0x58,
	0x9e, 0xee, 0xd1, 0x48, 0x0f, 0xc9, 0x4d, 0xdf, 0x36, 0xa8, 0x2a, 0x83, 0x7d, 0x2a, 0xd9, 0x96,
	0x2e, 0xe3, 0xe2, 0x3a, 0xb4, 0x99, 0x40, 0x35, 0x84, 0xf3, 0x34, 0x83, 0x48, 0x7d, 0x84, 0x22,
	0x8a, 0x5f, 0x06, 0x2b, 0x5f, 0x34, 0xeb, 0x49, 0xdb, 0x6e, 0x90, 0xce, 0xbf, 0x06, 0x98, 0xbb,
	0x59, 0x96, 0x13, 0x90, 0xb9, 0x6e, 0x60, 0xa9, 0x2e, 0x28, 0xd0, 0x44, 0x90, 0x5b, 0xa9, 0x90,
	0x87, 0x4a, 0x95, 0x53, 0xaa, 0x0c, 0x22, 0x7b, 0x92, 0xc7, 0xc9, 0x78, 0x2c, 0x50, 0xb9, 0x94,
	0x55, 0xf7, 0x94, 0x2d, 0x57, 0x55, 0x2f, 0xd0, 0x54, 0x94, 0x1e, 0xde, 0x47, 0x88, 0x49, 0xb5,
	0x0b, 0x34, 0x11, 0x64, 0x39, 0x6f, 0x91, 0x85, 0x89, 0x83, 0x43, 0xa5, 0xd9, 0x00, 0x72, 0x37,
	0x29, 0x5c, 0xc5, 0xc9, 0x8b, 0x51, 0xa0, 0xa9, 0x28, 0x67, 0xa6, 0x5c, 0x4e, 0x17, 0x3f, 0xa3,
	0x25, 0xb8, 0x2a, 0x5e, 0x81, 0x66, 0xa1, 0xce, 0x05, 0x1c, 0x5d, 0xfb, 0x6c, 0xcd, 0x1c, 0x97,
	0x2d, 0x5c, 0x54, 0x53, 0x2c, 0x19, 0xa1, 0x5b, 0xe3, 0xdb, 0xd8, 0x19, 0xdf, 0xfb, 0x9f, 0x82,
	0xe3, 0xaf, 0xa0, 0x9c, 0xbe, 0x97, 0xa4, 0x0c, 0x85, 0xf3, 0xd7, 0xaf, 0xce, 0xcd, 0x03, 0x02,
	0x70, 0x38, 0x99, 0xd2, 0xf1, 0xf0, 0xd2, 0x34, 0x48, 0x09, 0xf2, 0x97, 0xd3, 0x1b, 0x33, 0x47,
	0x6a, 0x50, 0x7e, 0x33, 0xa2, 0x6f, 0xdf, 0x49, 0x29, 0x7f, 0xfc, 0x3d, 0x54, 0x33, 0xcf, 0x0d,
	0x79, 0x04, 0x8d, 0xf9, 0x68, 0x3c, 0x9b, 0xd2, 0x21, 0x7d, 0xfb, 0x6e, 0x44, 0xe9, 0x94, 0x9a,
	0x07, 0xe4, 0x21, 0xd4, 0x5f, 0x4f, 0xde, 0x0c, 0x2f, 0x5f, 0x9f, 0xbe, 0x9b, 0x4f, 0x2f, 0x46,
	0x13, 0xd3, 0x90, 0xbc, 0x14, 0x9a, 0x0d, 0xdf, 0x5e, 0x4e, 0x87, 0xa7, 0x66, 0xee, 0xf8, 0x0d,
	0x94, 0xd3, 0x31, 0x4f, 0xaa, 0x50, 0xba, 0x9e, 0x5c, 0x4c, 0xa6, 0x37, 0x13, 0xf3, 0x40, 0x46,
	0x34, 0x9c, 0x4d, 0xae, 0x92, 0x28, 0x5e, 0xbd, 0x1c, 0x9b, 0x39, 0xb9, 0x38, 0x4b, 0x17, 0xc3,
	0xcb, 0xb9, 0x99, 0x97, 0x16, 0x37, 0xa3, 0x93, 0xd9, 0xf5, 0xd5, 0xb9, 0x59, 0x50, 0xe8, 0xe9,
	0xd8, 0x2c, 0xb6, 0x72, 0xa6, 0x31, 0xf8, 0xdb, 0x80, 0xda, 0x49, 0xe0, 0x8a, 0x5f, 0x5f, 0x31,
	0x81, 0x1f, 0x58, 0x4c, 0x3a, 0x50, 0xb8, 0x42, 0xdf, 0x26, 0x35, 0x7d, 0x23, 0xd5, 0xb7, 0x51,
	0x0b, 0x94, 0xa4, 0x72, 0xf8, 0xdc, 0x20, 0xdf, 0x41, 0xe3, 0x0c, 0x85, 0x75, 0x9b, 0xed, 0xa1,
	0x64, 0x00, 0x6d, 0xbf, 0x05, 0xad, 0xa3, 0xbd, 0xc3, 0x50, 0x0e, 0x01, 0x65, 0x7f, 0x86, 0x68,
	0x2f, 0x98, 0x75, 0x47, 0xb6, 0x3e, 0xb3, 0x5a, 0x2d, 0x65, 0xb5, 0xb7, 0x80, 0xcf, 0x8d, 0x93,
	0x17, 0x3f, 0x7d, 0xb6, 0x74, 0xc4, 0xed, 0x6a, 0xd1, 0xb3, 0x02, 0xaf, 0xaf, 0x62, 0x1f, 0xf9,
	0x4b, 0xc7, 0xc7, 0x3e, 0x0b, 0x1d, 0xde, 0x8f, 0x42, 0xeb, 0xaf, 0x5c, 0x23, 0x03, 0xf7, 0x68,
	0x68, 0x2d, 0x0e, 0xd5, 0xe7, 0xde, 0x8b, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xfd, 0xab,
	0x54, 0x49, 0x0a, 0x00, 0x00,
}
